import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from ttkthemes import ThemedStyle
from PIL import Image, ImageTk, ImageDraw
from model import create_bayesian_network, visualize_network
from pgmpy.inference import VariableElimination
from datetime import datetime
import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas


SYMP_LIST = [
    ('Fever', 'Fever'),
    ('Cough', 'Cough'),
    ('Sore Throat', 'SoreThroat'),
    ('Sneezing', 'Sneezing'),
    ('Loss of Smell', 'LossOfSmell')
]
DISEASES = ['Flu', 'COVID', 'Allergy']


def format_percentage(v: float) -> str:
    return f"{v:.1f}%"


def generate_medical_report(evidence: dict, probabilities: dict, filename: str = None) -> str:
    """Generate a human-readable medical report and optionally save to filename.

    The report contains observed symptoms, calculated probabilities, interpretation,
    recommended next steps, references and a disclaimer.
    """
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    symptoms_yes = [k for k, v in evidence.items() if int(v) == 1]
    symptoms_no = [k for k, v in evidence.items() if int(v) == 0]

    lines = []
    lines.append('Medical Diagnosis Report')
    lines.append('Generated: ' + now)
    lines.append('')
    lines.append('Observed symptoms:')
    if symptoms_yes:
        for s in symptoms_yes:
            lines.append(' - ' + s)
    else:
        lines.append(' - None reported')
    lines.append('')

    lines.append('Computed disease probabilities:')
    for d, p in sorted(probabilities.items(), key=lambda x: x[1], reverse=True):
        lines.append(f' - {d}: {format_percentage(p)}')
    lines.append('')

    # Interpretation (concise, non-diagnostic)
    top = max(probabilities.items(), key=lambda x: x[1])
    lines.append('Interpretation:')
    lines.append(f" The most likely condition based on the provided symptoms is {top[0]} ({format_percentage(top[1])}).")
    lines.append(' This is a probabilistic estimate produced by a Bayesian network model and not a clinical diagnosis.')
    lines.append('')

    lines.append('Suggested next steps (general guidance):')
    lines.append(' - If symptoms are mild, consider self-care (rest, fluids, over-the-counter medications) and monitor your condition.')
    lines.append(' - If you suspect COVID-19 (e.g., loss of smell, high fever, cough), consider getting a COVID test and follow local public health guidance.')
    lines.append(' - If symptoms are severe (difficulty breathing, persistent chest pain, confusion, inability to wake), seek emergency medical care immediately.')
    lines.append(' - For persistent or concerning symptoms, consult a qualified healthcare professional for evaluation and testing.')
    lines.append('')

    lines.append('Medical facts & references (general):')
    lines.append(' - Flu (influenza): common symptoms include fever, cough, sore throat, body aches; antivirals may be prescribed in some cases. See CDC: https://www.cdc.gov/flu')
    lines.append(' - COVID-19: common symptoms include fever, cough, loss of taste/smell; testing and isolation guidance varies by region. See WHO: https://www.who.int/health-topics/coronavirus')
    lines.append(' - Allergic rhinitis (allergy): typical symptoms include sneezing, runny nose, itchy eyes; not usually associated with fever or loss of smell.')
    lines.append('')

    lines.append('Disclaimer:')
    lines.append(' This report is generated by a simple educational Bayesian model and is not a substitute for professional medical advice, diagnosis, or treatment.')
    lines.append(' Always seek the advice of your physician or other qualified health provider with any questions you may have regarding a medical condition.')

    report = '\n'.join(lines)

    if filename:
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
        except Exception as e:
            raise

    return report


def generate_pdf_report(report_text: str, filename: str):
    """Create a simple PDF containing the report_text using reportlab."""
    c = canvas.Canvas(filename, pagesize=letter)
    width, height = letter
    margin = 50
    y = height - margin
    line_height = 12

    for line in report_text.split('\n'):
        if not line:
            y -= line_height
            continue
        # crude wrapping by characters
        while len(line) > 100:
            part = line[:100]
            c.drawString(margin, y, part)
            y -= line_height
            line = line[100:]
        c.drawString(margin, y, line)
        y -= line_height
        if y < margin:
            c.showPage()
            y = height - margin

    c.save()


class DiagnosisGUI:
    def __init__(self, root):
        self.root = root
        self.root.title('Medical Diagnosis - Bayesian Network')
        self.model = create_bayesian_network()

        # Themed style (ttkthemes) with fallback
        try:
            self.style = ThemedStyle(self.root)
            themes = self.style.theme_names()
            default_theme = 'equilux' if 'equilux' in themes else themes[0]
            self.style.set_theme(default_theme)
        except Exception:
            self.style = ttk.Style()
            themes = self.style.theme_names()

        # create a small programmatic icon and set it
        try:
            icon_path = os.path.join(os.path.dirname(__file__), 'app_icon.png')
            if not os.path.exists(icon_path):
                img = Image.new('RGBA', (64, 64), (30, 144, 255, 255))
                draw = ImageDraw.Draw(img)
                draw.ellipse((8, 8, 56, 56), fill=(255, 255, 255, 255))
                draw.text((18, 22), 'MD', fill=(30, 144, 255, 255))
                img.save(icon_path)
            try:
                self.tk_icon = ImageTk.PhotoImage(Image.open(icon_path))
                self.root.iconphoto(False, self.tk_icon)
            except Exception:
                pass
        except Exception:
            pass

        # Main layout frames
        self.left = ttk.Frame(root, padding=12)
        self.left.grid(row=0, column=0, sticky='nsew')
        self.right = ttk.Frame(root, padding=12)
        self.right.grid(row=0, column=1, sticky='nsew')

        root.columnconfigure(0, weight=0)
        root.columnconfigure(1, weight=1)
        root.rowconfigure(0, weight=1)

        # Title
        ttk.Label(self.left, text='Symptom Selection', font=('Segoe UI', 14, 'bold')).grid(row=0, column=0, sticky='w')

        # Theme selector
        ttk.Label(self.left, text='Theme:').grid(row=1, column=0, sticky='w', pady=(8,0))
        self.theme_var = tk.StringVar(value=themes[0] if themes else '')
        self.theme_cb = ttk.Combobox(self.left, textvariable=self.theme_var, values=list(themes), state='readonly')
        self.theme_cb.grid(row=2, column=0, sticky='w')
        self.theme_cb.bind('<<ComboboxSelected>>', self.on_theme_change)

        # Symptom checkboxes
        self.vars = {}
        sym_frame = ttk.Frame(self.left)
        sym_frame.grid(row=3, column=0, pady=(10,0), sticky='w')
        for i, (label, key) in enumerate(SYMP_LIST, start=0):
            var = tk.IntVar(value=0)
            cb = ttk.Checkbutton(sym_frame, text=label, variable=var)
            cb.grid(row=i, column=0, sticky='w', pady=2)
            self.vars[key] = var

        # Buttons
        self.diagnose_btn = ttk.Button(self.left, text='Diagnose', command=self.on_diagnose)
        self.diagnose_btn.grid(row=4, column=0, pady=(12,0), sticky='w')

        self.refresh_btn = ttk.Button(self.left, text='Refresh Network Image', command=self.refresh_network_image)
        self.refresh_btn.grid(row=5, column=0, pady=(8,0), sticky='w')

        self.save_report_btn = ttk.Button(self.left, text='Save Last Report...', command=self.save_last_report)
        self.save_report_btn.grid(row=6, column=0, pady=(8,0), sticky='w')

        self.save_pdf_btn = ttk.Button(self.left, text='Export Report as PDF...', command=self.save_last_report_pdf)
        self.save_pdf_btn.grid(row=7, column=0, pady=(8,0), sticky='w')

        # Result area
        ttk.Label(self.right, text='Diagnosis & Report', font=('Segoe UI', 14, 'bold')).grid(row=0, column=0, sticky='w')
        self.result_text = tk.Text(self.right, height=20, width=60, state='disabled', wrap='word', padx=8, pady=8)
        self.result_text.grid(row=1, column=0, sticky='nsew', pady=(6,0))
        self.right.rowconfigure(1, weight=1)

        # Image area
        self.image_label = ttk.Label(self.right)
        self.image_label.grid(row=1, column=1, padx=(12,0), sticky='ne')

        # Generate initial network image
        visualize_network(self.model)
        self.load_image()

        # storage for last report
        self.last_report = None

    def on_theme_change(self, _ev=None):
        theme = self.theme_var.get()
        try:
            self.style.theme_use(theme)
        except Exception:
            pass

    def refresh_network_image(self):
        visualize_network(self.model)
        self.load_image()
        messagebox.showinfo('Network', 'Bayesian network image refreshed and saved as sample_output.png')

    def load_image(self):
        try:
            img = Image.open('sample_output.png')
            img.thumbnail((360, 360))
            self.tkimg = ImageTk.PhotoImage(img)
            self.image_label.configure(image=self.tkimg)
        except Exception:
            self.image_label.configure(text='(No image)')

    def on_diagnose(self):
        evidence = {k: int(v.get()) for k, v in self.vars.items()}
        try:
            inference = VariableElimination(self.model)
            probs = {}
            for disease in DISEASES:
                q = inference.query(variables=[disease], evidence=evidence)
                probs[disease] = float(q.values[1]) * 100.0

            # Display results and create report
            self.display_results(probs)
            report = generate_medical_report(evidence, probs)
            self.last_report = report
        except Exception as e:
            messagebox.showerror('Error', f'Failed to perform inference:\n{e}')

    def display_results(self, probs: dict):
        sorted_probs = sorted(probs.items(), key=lambda x: x[1], reverse=True)
        top = sorted_probs[0]

        out_lines = ['Predicted Disease Probabilities:']
        for d, p in sorted_probs:
            out_lines.append(f'{d}: {format_percentage(p)}')
        out_lines.append('')
        out_lines.append(f'Most Probable Disease: {top[0]} ({format_percentage(top[1])})')

        self.result_text.configure(state='normal')
        self.result_text.delete('1.0', 'end')
        self.result_text.insert('1.0', '\n'.join(out_lines))
        self.result_text.configure(state='disabled')

        messagebox.showinfo('Diagnosis Complete', f"Most Probable: {top[0]} ({format_percentage(top[1])})")

    def save_last_report(self):
        if not self.last_report:
            messagebox.showwarning('No report', 'No report available yet. Please run Diagnose first.')
            return

        filetypes = [('Text files', '*.txt'), ('All files', '*.*')]
        default_name = f'diagnosis_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
        path = filedialog.asksaveasfilename(defaultextension='.txt', filetypes=filetypes, initialfile=default_name)
        if path:
            try:
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(self.last_report)
                messagebox.showinfo('Saved', f'Report saved to {path}')
            except Exception as e:
                messagebox.showerror('Save error', f'Failed to save report:\n{e}')

    def save_last_report_pdf(self):
        if not self.last_report:
            messagebox.showwarning('No report', 'No report available yet. Please run Diagnose first.')
            return

        filetypes = [('PDF files', '*.pdf'), ('All files', '*.*')]
        default_name = f'diagnosis_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        path = filedialog.asksaveasfilename(defaultextension='.pdf', filetypes=filetypes, initialfile=default_name)
        if path:
            try:
                generate_pdf_report(self.last_report, path)
                messagebox.showinfo('Saved', f'PDF report saved to {path}')
            except Exception as e:
                messagebox.showerror('Save error', f'Failed to save PDF report:\n{e}')


def run_gui():
    root = tk.Tk()
    root.geometry('1000x620')
    app = DiagnosisGUI(root)
    root.mainloop()


if __name__ == '__main__':
    run_gui()
